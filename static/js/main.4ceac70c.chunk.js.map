{"version":3,"sources":["components/Content/content.tsx","components/NavButton/navButton.tsx","data/pages.js","data/cars.js","App.tsx","serviceWorker.js","index.js"],"names":["Content","props","content","pages","pageId","onItemClick","summary","react_default","a","createElement","className","title","map","item","btnClass","classNames","selected","id","clickable","length","onClick","key","value","name","NavButton","maxPages","onClickTo","isDisabled","undefined","disabled","entity","brand","model","brandId","availableEngineIds","availableGearsIds","engine","gear","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cars","objectSpread","onClickFwd","setState","prevState","getContent","onClickBack","e","Number","target","state","tempSummary","filter","x","includes","index","concat","_this2","Fragment","navButton_NavButton","content_Content","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ceac70c.chunk.js","sourcesContent":["import React, {MouseEvent} from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport {IEntity, IPages} from \"../../common/interfaces\";\r\n\r\ninterface IContentProps {\r\n    pageId: number;\r\n    content: IEntity[];\r\n    summary: number[];\r\n    pages: IPages[];\r\n    onItemClick: (event: MouseEvent<HTMLLIElement>) => void;\r\n}\r\n\r\nexport const Content: (props: IContentProps) => JSX.Element = ( props ) => {\r\n    const { content, pages, pageId, onItemClick, summary } = props;\r\n    return (\r\n        <div className=\"content\">\r\n            <label className=\"label\">{pages[pageId].title}</label>\r\n            <ul>\r\n                {content.map((item) => {\r\n                    const btnClass: string = classNames({\r\n                        \"selected\": summary[pageId] === item.id,\r\n                        \"clickable\": pageId < pages.length - 1,\r\n                    });\r\n                    return (\r\n                        <li\r\n                            className={btnClass}\r\n                            onClick={onItemClick}\r\n                            key={item.id}\r\n                            value={item.id}>\r\n                            {item.name}\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};","import React, {MouseEvent} from \"react\";\r\n\r\ninterface INavButtonProps {\r\n    pageId: number;\r\n    maxPages: number;\r\n    summary: number[];\r\n    name: string;\r\n    onClickTo: (event: MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport const NavButton: (props: INavButtonProps) => JSX.Element = (props) => {\r\n    const { pageId, maxPages, summary, onClickTo, name } = props;\r\n    const isDisabled: boolean = name === \"Back\"\r\n        ? pageId <= 0\r\n        : pageId >= maxPages || summary[pageId] === undefined;\r\n\r\n    return (\r\n        <button\r\n            className={isDisabled ? \"disabled\" : \"enabled clickable\"}\r\n            disabled={isDisabled}\r\n            onClick={onClickTo}>\r\n            {name}\r\n        </button>\r\n    );\r\n};","export const pages = [\r\n    {\r\n        'title': 'Select brand',\r\n        'entity': 'brand',\r\n    },\r\n    {\r\n        'title': 'Select model',\r\n        'entity': 'model',\r\n    },\r\n    {\r\n        'title': 'Select engine',\r\n        'entity': 'engine',\r\n    },\r\n    {\r\n        'title': 'Select gear',\r\n        'entity': 'gear',\r\n    },\r\n    {\r\n        'title': 'Summary',\r\n        'entity': 'summary',\r\n    }\r\n];","export const brand = [\r\n  {\r\n    'id': 1,\r\n    'name': 'Audi'\r\n  },\r\n  {\r\n    'id': 2,\r\n    'name': 'BMW'\r\n  },\r\n  {\r\n    'id': 3,\r\n    'name': 'Mercedes'\r\n  }];\r\n\r\n export const model = [\r\n  {\r\n    'id': 1,\r\n    'name': 'X1',\r\n    'brandId': 2,\r\n    'availableEngineIds': [1, 2],\r\n    'availableGearsIds': [1, 2]\r\n  },\r\n  {\r\n    'id': 2,\r\n    'name': 'X3',\r\n    'brandId': 2,\r\n    'availableEngineIds': [1, 2],\r\n    'availableGearsIds': [1, 2]\r\n  },\r\n  {\r\n    'id': 3,\r\n    'name': 'X5',\r\n    'brandId': 2,\r\n    'availableEngineIds': [1, 2],\r\n    'availableGearsIds': [1, 2]\r\n  },\r\n  {\r\n    'id': 4,\r\n    'name': 'GLA',\r\n    'brandId': 3,\r\n    'availableEngineIds': [1, 2],\r\n    'availableGearsIds': [1, 2]\r\n  },\r\n  {\r\n    'id': 5,\r\n    'name': 'GLC',\r\n    'brandId': 3,\r\n    'availableEngineIds': [1, 2],\r\n    'availableGearsIds': [1, 2]\r\n  },\r\n  {\r\n    'id': 6,\r\n    'name': 'GLE',\r\n    'brandId': 3,\r\n    'availableEngineIds': [1, 2],\r\n    'availableGearsIds': [1, 2]\r\n  },\r\n  {\r\n    'id': 7,\r\n    'name': 'Q3',\r\n    'brandId': 1,\r\n    'availableEngineIds': [1, 2],\r\n    'availableGearsIds': [1, 2, 3]\r\n  },\r\n  {\r\n    'id': 8,\r\n    'name': 'Q5',\r\n    'brandId': 1,\r\n    'availableEngineIds': [1, 2],\r\n    'availableGearsIds': [1, 2, 3]\r\n  },\r\n  {\r\n    'id': 9,\r\n    'name': 'Q7',\r\n    'brandId': 1,\r\n    'availableEngineIds': [1, 2],\r\n    'availableGearsIds': [1, 2, 3]\r\n  }\r\n];\r\n\r\nexport const engine = [\r\n  {\r\n    'id': 1,\r\n    'name': 'benzin'\r\n  },\r\n  {\r\n    'id': 2,\r\n    'name': 'diesel'\r\n  }\r\n];\r\n\r\nexport const gear = [\r\n  {\r\n    'id': 1,\r\n    'name': 'manual'\r\n  },\r\n  {\r\n    'id': 2,\r\n    'name': 'automatic'\r\n  },\r\n];\r\n","import React, { MouseEvent, Component } from \"react\";\r\n\r\nimport { Content } from \"./components/Content/content\";\r\nimport { NavButton } from \"./components/NavButton/navButton\";\r\nimport { pages } from \"./data/pages\";\r\nimport * as cars from \"./data/cars\";\r\nimport \"./App.css\";\r\n\r\nimport { IEntity, IPages } from \"./common/interfaces\";\r\n\r\ninterface IModel extends IEntity {\r\n  brandId: number;\r\n  availableEngineIds: number[];\r\n  availableGearsIds: number[];\r\n}\r\n\r\ninterface IAppState {\r\n  pageId: number;\r\n  content: IEntity[];\r\n  summary: number[];\r\n}\r\n\r\ninterface ICars {\r\n  brand: IEntity[];\r\n  model: IModel[];\r\n  engine: IEntity[];\r\n  gear: IEntity[];\r\n}\r\n\r\nclass App extends Component<{}, IAppState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      pageId: 0,\r\n      content: [],\r\n      summary: [],\r\n    };\r\n  }\r\n  cars: ICars = { ...cars };\r\n  pages: IPages[] = pages;\r\n\r\n  public componentDidMount(): void {\r\n    this.setState(() => ({\r\n      content: this.getContent(0),\r\n    }));\r\n  }\r\n\r\n  public onClickFwd = () => {\r\n    this.setState((prevState) => ({\r\n      pageId: prevState.pageId + 1,\r\n      content: this.getContent(prevState.pageId + 1),\r\n    }));\r\n  }\r\n\r\n  public onClickBack = () => {\r\n    this.setState((prevState) => ({\r\n      pageId: prevState.pageId - 1,\r\n      content: this.getContent(prevState.pageId - 1),\r\n    }));\r\n  }\r\n\r\n  public onItemClick = (e: MouseEvent<HTMLLIElement>) => {\r\n    const id: number = Number((e.target as HTMLInputElement).value);\r\n    if (this.state.pageId < this.pages.length - 1) {\r\n      let tempSummary: number[] = this.state.summary;\r\n      tempSummary[this.state.pageId] = id;\r\n      tempSummary.length = this.state.pageId + 1;\r\n      this.setState(prevState => ({ summary: prevState.summary }));\r\n    }\r\n  }\r\n\r\n  private getContent = (pageId: number) => {\r\n    switch (pageId) {\r\n      case 1:\r\n        return this.cars.model.filter(x => x.brandId === this.state.summary[0]);\r\n      case 2:\r\n        return this.cars.engine.filter(x => this.cars.model[x.id].availableEngineIds.includes(x.id));\r\n      case 3:\r\n        return this.cars.gear.filter(x => this.cars.model[x.id].availableGearsIds.includes(x.id));\r\n      case 4:\r\n        return this.state.summary.map((item, index) => {\r\n          return {\r\n            id: index,\r\n            name: `${pages[index].entity}: ${cars[pages[index].entity][this.state.summary[index] - 1].name}`\r\n          };\r\n        });\r\n      default:\r\n        return this.cars.brand;\r\n    }\r\n  }\r\n\r\n  public render(): React.ReactNode {\r\n    return (\r\n      <>\r\n        <div className=\"navigation\">\r\n          <NavButton\r\n            pageId={this.state.pageId}\r\n            maxPages={this.pages.length}\r\n            summary={this.state.summary}\r\n            onClickTo={this.onClickBack}\r\n            name=\"Back\" />\r\n          <NavButton\r\n            pageId={this.state.pageId}\r\n            maxPages={this.pages.length}\r\n            summary={this.state.summary}\r\n            onClickTo={this.onClickFwd}\r\n            name=\"Forward\" />\r\n        </div>\r\n        <Content\r\n          content={this.state.content}\r\n          pages={this.pages}\r\n          pageId={this.state.pageId}\r\n          summary={this.state.summary}\r\n          onItemClick={this.onItemClick} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}